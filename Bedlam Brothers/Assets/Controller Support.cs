//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Controller Support.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ControllerSupport: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ControllerSupport()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controller Support"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""83c3330f-f9e9-400f-972d-59e03c72dcaf"",
            ""actions"": [
                {
                    ""name"": ""P1RotateLeft"",
                    ""type"": ""Button"",
                    ""id"": ""7cabc0ca-e589-4db9-ad6e-f8d2a8bdcee5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""P1RotateRight"",
                    ""type"": ""Button"",
                    ""id"": ""b8d62462-b1b5-45d8-8181-b1c04afc4e9a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""P2RotateLeft"",
                    ""type"": ""Button"",
                    ""id"": ""fd40b032-ff44-4131-934a-e6eddc0b441a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""P2RotateRight"",
                    ""type"": ""Button"",
                    ""id"": ""515e2c3e-8f16-4437-bfca-d8afcc440bd2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Start"",
                    ""type"": ""Button"",
                    ""id"": ""d5116b98-da2a-41f4-85a7-039ebd7c6284"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""P1Left"",
                    ""type"": ""Button"",
                    ""id"": ""f706710a-7050-4636-a3df-c24cb983c129"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""P1Right"",
                    ""type"": ""Button"",
                    ""id"": ""e335130b-7869-4940-93f7-73f9b91feaca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""P1Up"",
                    ""type"": ""Button"",
                    ""id"": ""dbdf6e22-4d68-4cc6-9390-70a8dbc89fd1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""P1Down"",
                    ""type"": ""Button"",
                    ""id"": ""335d1e99-3db7-44c0-964e-2d0cc52fac9e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""P2Left"",
                    ""type"": ""Button"",
                    ""id"": ""c39f2cb0-1942-4a62-9a1b-fb61315d8ac9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""P2Right"",
                    ""type"": ""Button"",
                    ""id"": ""cc885e8b-52f7-4101-9c9e-0f2cf5c06531"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""P2Up"",
                    ""type"": ""Button"",
                    ""id"": ""40870404-bb7f-43ff-a7e4-c8a2ef13536b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""P2Down"",
                    ""type"": ""Button"",
                    ""id"": ""6354c49c-df42-482e-aa91-09109da9cbc1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""75ba4a1b-6b88-45a3-9949-0d69c66e4be9"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""P1RotateLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fb46cf69-841b-4324-9c22-66788cf7b33f"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""P1RotateLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6ee61e17-b43b-41c0-a7d5-ff6f62e2cc86"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""P1RotateRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f201d90d-bf02-4ba0-9f26-65b6ca338ff9"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""P1RotateRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""00c5668c-b8f8-450d-ba9d-b9f6e64ab673"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""P2RotateLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fb068eb3-038c-4ec7-9b7b-a859c9936a8b"",
                    ""path"": ""<Keyboard>/rightCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""P2RotateLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""12657dbd-848f-4a4d-bc85-6e226e93d870"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""P2RotateRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""86ae3fa1-5dfe-442f-82ac-4a88b0bb2755"",
                    ""path"": ""<Keyboard>/0"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""P2RotateRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""31debe2f-3374-4686-835f-233f287d3050"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""825c4fd5-ea41-4532-a60d-5144a602f27a"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8f07d081-8227-42ec-bfd1-009f265c5b4f"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""064f485c-45ca-4c2e-b562-6e7dac7b5320"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0c8a94e3-840e-4d8c-b142-652ef091365c"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""P1Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b46665c5-6941-4b00-83ea-db0fe96604b3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""P1Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c38e91bf-9039-47f8-aae1-aa1fc04f6b25"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""P1Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""566ba710-0be4-4811-98a0-9e3e6d8aedaf"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""P1Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""146e5993-fe8a-47ec-a956-8bb9b73be239"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""P1Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""030e8945-b79b-49d8-a893-ad8b2e9990e3"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""P1Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""48a6f443-0fca-4f16-a085-e6ccd39e3e3b"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""P1Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1ae435df-2621-4354-8189-41f83deb7ca6"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""P1Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4512f86d-f759-44cc-a250-e4ac4987a101"",
                    ""path"": ""<Gamepad>/rightStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""P2Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cea59631-547a-40a9-8c8d-66a22606bcb8"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""P2Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1996041-8034-457d-9a90-4ba6e5490545"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""P2Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fc90638a-3384-4f00-895d-a132415bc078"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""P2Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3890a6e6-5fe6-4ec0-9d5b-35bd599014b5"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""P2Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4846935f-f878-413e-9f2a-0f460c0cd163"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""P2Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""29e2b9f2-a8f5-4448-8d11-3c28ddbbecdd"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""P2Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""af94c754-9d6f-4764-904a-2f680a35716d"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""P2Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""New action map"",
            ""id"": ""31c35464-a583-4db2-b40d-e691540196d1"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""c074c5c9-1700-4871-8974-129b9bf0c0a4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""99fa0b81-a1db-46a4-b116-6de30357e925"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""New action map1"",
            ""id"": ""8134c6d1-2d2e-4be1-98ee-212a9ef52f2f"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""1ad04ee3-3d5c-4103-89ef-9dbdb9e251ea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""16749c4e-fefe-4802-8e24-20469edfb7f7"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_P1RotateLeft = m_Gameplay.FindAction("P1RotateLeft", throwIfNotFound: true);
        m_Gameplay_P1RotateRight = m_Gameplay.FindAction("P1RotateRight", throwIfNotFound: true);
        m_Gameplay_P2RotateLeft = m_Gameplay.FindAction("P2RotateLeft", throwIfNotFound: true);
        m_Gameplay_P2RotateRight = m_Gameplay.FindAction("P2RotateRight", throwIfNotFound: true);
        m_Gameplay_Start = m_Gameplay.FindAction("Start", throwIfNotFound: true);
        m_Gameplay_P1Left = m_Gameplay.FindAction("P1Left", throwIfNotFound: true);
        m_Gameplay_P1Right = m_Gameplay.FindAction("P1Right", throwIfNotFound: true);
        m_Gameplay_P1Up = m_Gameplay.FindAction("P1Up", throwIfNotFound: true);
        m_Gameplay_P1Down = m_Gameplay.FindAction("P1Down", throwIfNotFound: true);
        m_Gameplay_P2Left = m_Gameplay.FindAction("P2Left", throwIfNotFound: true);
        m_Gameplay_P2Right = m_Gameplay.FindAction("P2Right", throwIfNotFound: true);
        m_Gameplay_P2Up = m_Gameplay.FindAction("P2Up", throwIfNotFound: true);
        m_Gameplay_P2Down = m_Gameplay.FindAction("P2Down", throwIfNotFound: true);
        // New action map
        m_Newactionmap = asset.FindActionMap("New action map", throwIfNotFound: true);
        m_Newactionmap_Newaction = m_Newactionmap.FindAction("New action", throwIfNotFound: true);
        // New action map1
        m_Newactionmap1 = asset.FindActionMap("New action map1", throwIfNotFound: true);
        m_Newactionmap1_Newaction = m_Newactionmap1.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_P1RotateLeft;
    private readonly InputAction m_Gameplay_P1RotateRight;
    private readonly InputAction m_Gameplay_P2RotateLeft;
    private readonly InputAction m_Gameplay_P2RotateRight;
    private readonly InputAction m_Gameplay_Start;
    private readonly InputAction m_Gameplay_P1Left;
    private readonly InputAction m_Gameplay_P1Right;
    private readonly InputAction m_Gameplay_P1Up;
    private readonly InputAction m_Gameplay_P1Down;
    private readonly InputAction m_Gameplay_P2Left;
    private readonly InputAction m_Gameplay_P2Right;
    private readonly InputAction m_Gameplay_P2Up;
    private readonly InputAction m_Gameplay_P2Down;
    public struct GameplayActions
    {
        private @ControllerSupport m_Wrapper;
        public GameplayActions(@ControllerSupport wrapper) { m_Wrapper = wrapper; }
        public InputAction @P1RotateLeft => m_Wrapper.m_Gameplay_P1RotateLeft;
        public InputAction @P1RotateRight => m_Wrapper.m_Gameplay_P1RotateRight;
        public InputAction @P2RotateLeft => m_Wrapper.m_Gameplay_P2RotateLeft;
        public InputAction @P2RotateRight => m_Wrapper.m_Gameplay_P2RotateRight;
        public InputAction @Start => m_Wrapper.m_Gameplay_Start;
        public InputAction @P1Left => m_Wrapper.m_Gameplay_P1Left;
        public InputAction @P1Right => m_Wrapper.m_Gameplay_P1Right;
        public InputAction @P1Up => m_Wrapper.m_Gameplay_P1Up;
        public InputAction @P1Down => m_Wrapper.m_Gameplay_P1Down;
        public InputAction @P2Left => m_Wrapper.m_Gameplay_P2Left;
        public InputAction @P2Right => m_Wrapper.m_Gameplay_P2Right;
        public InputAction @P2Up => m_Wrapper.m_Gameplay_P2Up;
        public InputAction @P2Down => m_Wrapper.m_Gameplay_P2Down;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @P1RotateLeft.started += instance.OnP1RotateLeft;
            @P1RotateLeft.performed += instance.OnP1RotateLeft;
            @P1RotateLeft.canceled += instance.OnP1RotateLeft;
            @P1RotateRight.started += instance.OnP1RotateRight;
            @P1RotateRight.performed += instance.OnP1RotateRight;
            @P1RotateRight.canceled += instance.OnP1RotateRight;
            @P2RotateLeft.started += instance.OnP2RotateLeft;
            @P2RotateLeft.performed += instance.OnP2RotateLeft;
            @P2RotateLeft.canceled += instance.OnP2RotateLeft;
            @P2RotateRight.started += instance.OnP2RotateRight;
            @P2RotateRight.performed += instance.OnP2RotateRight;
            @P2RotateRight.canceled += instance.OnP2RotateRight;
            @Start.started += instance.OnStart;
            @Start.performed += instance.OnStart;
            @Start.canceled += instance.OnStart;
            @P1Left.started += instance.OnP1Left;
            @P1Left.performed += instance.OnP1Left;
            @P1Left.canceled += instance.OnP1Left;
            @P1Right.started += instance.OnP1Right;
            @P1Right.performed += instance.OnP1Right;
            @P1Right.canceled += instance.OnP1Right;
            @P1Up.started += instance.OnP1Up;
            @P1Up.performed += instance.OnP1Up;
            @P1Up.canceled += instance.OnP1Up;
            @P1Down.started += instance.OnP1Down;
            @P1Down.performed += instance.OnP1Down;
            @P1Down.canceled += instance.OnP1Down;
            @P2Left.started += instance.OnP2Left;
            @P2Left.performed += instance.OnP2Left;
            @P2Left.canceled += instance.OnP2Left;
            @P2Right.started += instance.OnP2Right;
            @P2Right.performed += instance.OnP2Right;
            @P2Right.canceled += instance.OnP2Right;
            @P2Up.started += instance.OnP2Up;
            @P2Up.performed += instance.OnP2Up;
            @P2Up.canceled += instance.OnP2Up;
            @P2Down.started += instance.OnP2Down;
            @P2Down.performed += instance.OnP2Down;
            @P2Down.canceled += instance.OnP2Down;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @P1RotateLeft.started -= instance.OnP1RotateLeft;
            @P1RotateLeft.performed -= instance.OnP1RotateLeft;
            @P1RotateLeft.canceled -= instance.OnP1RotateLeft;
            @P1RotateRight.started -= instance.OnP1RotateRight;
            @P1RotateRight.performed -= instance.OnP1RotateRight;
            @P1RotateRight.canceled -= instance.OnP1RotateRight;
            @P2RotateLeft.started -= instance.OnP2RotateLeft;
            @P2RotateLeft.performed -= instance.OnP2RotateLeft;
            @P2RotateLeft.canceled -= instance.OnP2RotateLeft;
            @P2RotateRight.started -= instance.OnP2RotateRight;
            @P2RotateRight.performed -= instance.OnP2RotateRight;
            @P2RotateRight.canceled -= instance.OnP2RotateRight;
            @Start.started -= instance.OnStart;
            @Start.performed -= instance.OnStart;
            @Start.canceled -= instance.OnStart;
            @P1Left.started -= instance.OnP1Left;
            @P1Left.performed -= instance.OnP1Left;
            @P1Left.canceled -= instance.OnP1Left;
            @P1Right.started -= instance.OnP1Right;
            @P1Right.performed -= instance.OnP1Right;
            @P1Right.canceled -= instance.OnP1Right;
            @P1Up.started -= instance.OnP1Up;
            @P1Up.performed -= instance.OnP1Up;
            @P1Up.canceled -= instance.OnP1Up;
            @P1Down.started -= instance.OnP1Down;
            @P1Down.performed -= instance.OnP1Down;
            @P1Down.canceled -= instance.OnP1Down;
            @P2Left.started -= instance.OnP2Left;
            @P2Left.performed -= instance.OnP2Left;
            @P2Left.canceled -= instance.OnP2Left;
            @P2Right.started -= instance.OnP2Right;
            @P2Right.performed -= instance.OnP2Right;
            @P2Right.canceled -= instance.OnP2Right;
            @P2Up.started -= instance.OnP2Up;
            @P2Up.performed -= instance.OnP2Up;
            @P2Up.canceled -= instance.OnP2Up;
            @P2Down.started -= instance.OnP2Down;
            @P2Down.performed -= instance.OnP2Down;
            @P2Down.canceled -= instance.OnP2Down;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);

    // New action map
    private readonly InputActionMap m_Newactionmap;
    private List<INewactionmapActions> m_NewactionmapActionsCallbackInterfaces = new List<INewactionmapActions>();
    private readonly InputAction m_Newactionmap_Newaction;
    public struct NewactionmapActions
    {
        private @ControllerSupport m_Wrapper;
        public NewactionmapActions(@ControllerSupport wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Newactionmap_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Newactionmap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NewactionmapActions set) { return set.Get(); }
        public void AddCallbacks(INewactionmapActions instance)
        {
            if (instance == null || m_Wrapper.m_NewactionmapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_NewactionmapActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(INewactionmapActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(INewactionmapActions instance)
        {
            if (m_Wrapper.m_NewactionmapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(INewactionmapActions instance)
        {
            foreach (var item in m_Wrapper.m_NewactionmapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_NewactionmapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public NewactionmapActions @Newactionmap => new NewactionmapActions(this);

    // New action map1
    private readonly InputActionMap m_Newactionmap1;
    private List<INewactionmap1Actions> m_Newactionmap1ActionsCallbackInterfaces = new List<INewactionmap1Actions>();
    private readonly InputAction m_Newactionmap1_Newaction;
    public struct Newactionmap1Actions
    {
        private @ControllerSupport m_Wrapper;
        public Newactionmap1Actions(@ControllerSupport wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Newactionmap1_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Newactionmap1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Newactionmap1Actions set) { return set.Get(); }
        public void AddCallbacks(INewactionmap1Actions instance)
        {
            if (instance == null || m_Wrapper.m_Newactionmap1ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Newactionmap1ActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(INewactionmap1Actions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(INewactionmap1Actions instance)
        {
            if (m_Wrapper.m_Newactionmap1ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(INewactionmap1Actions instance)
        {
            foreach (var item in m_Wrapper.m_Newactionmap1ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Newactionmap1ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Newactionmap1Actions @Newactionmap1 => new Newactionmap1Actions(this);
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IGameplayActions
    {
        void OnP1RotateLeft(InputAction.CallbackContext context);
        void OnP1RotateRight(InputAction.CallbackContext context);
        void OnP2RotateLeft(InputAction.CallbackContext context);
        void OnP2RotateRight(InputAction.CallbackContext context);
        void OnStart(InputAction.CallbackContext context);
        void OnP1Left(InputAction.CallbackContext context);
        void OnP1Right(InputAction.CallbackContext context);
        void OnP1Up(InputAction.CallbackContext context);
        void OnP1Down(InputAction.CallbackContext context);
        void OnP2Left(InputAction.CallbackContext context);
        void OnP2Right(InputAction.CallbackContext context);
        void OnP2Up(InputAction.CallbackContext context);
        void OnP2Down(InputAction.CallbackContext context);
    }
    public interface INewactionmapActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface INewactionmap1Actions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
