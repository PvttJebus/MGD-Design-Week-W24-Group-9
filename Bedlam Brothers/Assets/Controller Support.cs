//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Controller Support.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ControllerSupport: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ControllerSupport()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controller Support"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""83c3330f-f9e9-400f-972d-59e03c72dcaf"",
            ""actions"": [
                {
                    ""name"": ""P1 - Move"",
                    ""type"": ""Value"",
                    ""id"": ""3b54d4c9-a2bc-4f5d-aa1d-c9339604791a"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""P2 - Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""51cb8b78-4754-4d3c-abec-2cdc1cac476a"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""P1 - Rotate Left"",
                    ""type"": ""Button"",
                    ""id"": ""7cabc0ca-e589-4db9-ad6e-f8d2a8bdcee5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""P1 - Rotate Right"",
                    ""type"": ""Button"",
                    ""id"": ""b8d62462-b1b5-45d8-8181-b1c04afc4e9a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""P2 - Rotate Left"",
                    ""type"": ""Button"",
                    ""id"": ""fd40b032-ff44-4131-934a-e6eddc0b441a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""P2 - Rotate Right"",
                    ""type"": ""Button"",
                    ""id"": ""515e2c3e-8f16-4437-bfca-d8afcc440bd2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Start"",
                    ""type"": ""Button"",
                    ""id"": ""d5116b98-da2a-41f4-85a7-039ebd7c6284"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""aa78c8c3-561e-4810-9395-0a38c3612c87"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""P1 - Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""bc9dddc8-03cc-435d-a140-69c8535f2e94"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""P1 - Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9f25614a-1e29-41e4-9d35-9c620edfa364"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""P1 - Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2b323374-28df-48c3-b604-b0a3c0a8b8df"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""P1 - Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1edecb83-5639-4475-aea9-94d9f36f9e83"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""P1 - Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0e971bd5-be66-432f-a0d2-8145330c8a63"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""P1 - Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6011c2b8-bdf5-4c38-9291-37f69b8519a7"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""P2 - Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""4756575f-0d03-4733-9570-b378aaec9f3b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""P2 - Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""08388a4e-b3a6-44be-9fa6-c30246c59a40"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""P2 - Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""05080c60-bae4-41fc-9e02-7037c0062d89"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""P2 - Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""524a3350-6c9c-49ea-a7a0-02e806f0adb6"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""P2 - Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e8a06afd-66b7-42dc-ad48-cba7b309edd6"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""P2 - Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""75ba4a1b-6b88-45a3-9949-0d69c66e4be9"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""P1 - Rotate Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fb46cf69-841b-4324-9c22-66788cf7b33f"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""P1 - Rotate Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6ee61e17-b43b-41c0-a7d5-ff6f62e2cc86"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""P1 - Rotate Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f201d90d-bf02-4ba0-9f26-65b6ca338ff9"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""P1 - Rotate Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""00c5668c-b8f8-450d-ba9d-b9f6e64ab673"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""P2 - Rotate Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fb068eb3-038c-4ec7-9b7b-a859c9936a8b"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""P2 - Rotate Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""12657dbd-848f-4a4d-bc85-6e226e93d870"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""P2 - Rotate Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""86ae3fa1-5dfe-442f-82ac-4a88b0bb2755"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""P2 - Rotate Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""31debe2f-3374-4686-835f-233f287d3050"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""825c4fd5-ea41-4532-a60d-5144a602f27a"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8f07d081-8227-42ec-bfd1-009f265c5b4f"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""064f485c-45ca-4c2e-b562-6e7dac7b5320"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""New action map"",
            ""id"": ""31c35464-a583-4db2-b40d-e691540196d1"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""c074c5c9-1700-4871-8974-129b9bf0c0a4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""99fa0b81-a1db-46a4-b116-6de30357e925"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_P1Move = m_Gameplay.FindAction("P1 - Move", throwIfNotFound: true);
        m_Gameplay_P2Move = m_Gameplay.FindAction("P2 - Move", throwIfNotFound: true);
        m_Gameplay_P1RotateLeft = m_Gameplay.FindAction("P1 - Rotate Left", throwIfNotFound: true);
        m_Gameplay_P1RotateRight = m_Gameplay.FindAction("P1 - Rotate Right", throwIfNotFound: true);
        m_Gameplay_P2RotateLeft = m_Gameplay.FindAction("P2 - Rotate Left", throwIfNotFound: true);
        m_Gameplay_P2RotateRight = m_Gameplay.FindAction("P2 - Rotate Right", throwIfNotFound: true);
        m_Gameplay_Start = m_Gameplay.FindAction("Start", throwIfNotFound: true);
        // New action map
        m_Newactionmap = asset.FindActionMap("New action map", throwIfNotFound: true);
        m_Newactionmap_Newaction = m_Newactionmap.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_P1Move;
    private readonly InputAction m_Gameplay_P2Move;
    private readonly InputAction m_Gameplay_P1RotateLeft;
    private readonly InputAction m_Gameplay_P1RotateRight;
    private readonly InputAction m_Gameplay_P2RotateLeft;
    private readonly InputAction m_Gameplay_P2RotateRight;
    private readonly InputAction m_Gameplay_Start;
    public struct GameplayActions
    {
        private @ControllerSupport m_Wrapper;
        public GameplayActions(@ControllerSupport wrapper) { m_Wrapper = wrapper; }
        public InputAction @P1Move => m_Wrapper.m_Gameplay_P1Move;
        public InputAction @P2Move => m_Wrapper.m_Gameplay_P2Move;
        public InputAction @P1RotateLeft => m_Wrapper.m_Gameplay_P1RotateLeft;
        public InputAction @P1RotateRight => m_Wrapper.m_Gameplay_P1RotateRight;
        public InputAction @P2RotateLeft => m_Wrapper.m_Gameplay_P2RotateLeft;
        public InputAction @P2RotateRight => m_Wrapper.m_Gameplay_P2RotateRight;
        public InputAction @Start => m_Wrapper.m_Gameplay_Start;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @P1Move.started += instance.OnP1Move;
            @P1Move.performed += instance.OnP1Move;
            @P1Move.canceled += instance.OnP1Move;
            @P2Move.started += instance.OnP2Move;
            @P2Move.performed += instance.OnP2Move;
            @P2Move.canceled += instance.OnP2Move;
            @P1RotateLeft.started += instance.OnP1RotateLeft;
            @P1RotateLeft.performed += instance.OnP1RotateLeft;
            @P1RotateLeft.canceled += instance.OnP1RotateLeft;
            @P1RotateRight.started += instance.OnP1RotateRight;
            @P1RotateRight.performed += instance.OnP1RotateRight;
            @P1RotateRight.canceled += instance.OnP1RotateRight;
            @P2RotateLeft.started += instance.OnP2RotateLeft;
            @P2RotateLeft.performed += instance.OnP2RotateLeft;
            @P2RotateLeft.canceled += instance.OnP2RotateLeft;
            @P2RotateRight.started += instance.OnP2RotateRight;
            @P2RotateRight.performed += instance.OnP2RotateRight;
            @P2RotateRight.canceled += instance.OnP2RotateRight;
            @Start.started += instance.OnStart;
            @Start.performed += instance.OnStart;
            @Start.canceled += instance.OnStart;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @P1Move.started -= instance.OnP1Move;
            @P1Move.performed -= instance.OnP1Move;
            @P1Move.canceled -= instance.OnP1Move;
            @P2Move.started -= instance.OnP2Move;
            @P2Move.performed -= instance.OnP2Move;
            @P2Move.canceled -= instance.OnP2Move;
            @P1RotateLeft.started -= instance.OnP1RotateLeft;
            @P1RotateLeft.performed -= instance.OnP1RotateLeft;
            @P1RotateLeft.canceled -= instance.OnP1RotateLeft;
            @P1RotateRight.started -= instance.OnP1RotateRight;
            @P1RotateRight.performed -= instance.OnP1RotateRight;
            @P1RotateRight.canceled -= instance.OnP1RotateRight;
            @P2RotateLeft.started -= instance.OnP2RotateLeft;
            @P2RotateLeft.performed -= instance.OnP2RotateLeft;
            @P2RotateLeft.canceled -= instance.OnP2RotateLeft;
            @P2RotateRight.started -= instance.OnP2RotateRight;
            @P2RotateRight.performed -= instance.OnP2RotateRight;
            @P2RotateRight.canceled -= instance.OnP2RotateRight;
            @Start.started -= instance.OnStart;
            @Start.performed -= instance.OnStart;
            @Start.canceled -= instance.OnStart;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);

    // New action map
    private readonly InputActionMap m_Newactionmap;
    private List<INewactionmapActions> m_NewactionmapActionsCallbackInterfaces = new List<INewactionmapActions>();
    private readonly InputAction m_Newactionmap_Newaction;
    public struct NewactionmapActions
    {
        private @ControllerSupport m_Wrapper;
        public NewactionmapActions(@ControllerSupport wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Newactionmap_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Newactionmap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NewactionmapActions set) { return set.Get(); }
        public void AddCallbacks(INewactionmapActions instance)
        {
            if (instance == null || m_Wrapper.m_NewactionmapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_NewactionmapActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(INewactionmapActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(INewactionmapActions instance)
        {
            if (m_Wrapper.m_NewactionmapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(INewactionmapActions instance)
        {
            foreach (var item in m_Wrapper.m_NewactionmapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_NewactionmapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public NewactionmapActions @Newactionmap => new NewactionmapActions(this);
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IGameplayActions
    {
        void OnP1Move(InputAction.CallbackContext context);
        void OnP2Move(InputAction.CallbackContext context);
        void OnP1RotateLeft(InputAction.CallbackContext context);
        void OnP1RotateRight(InputAction.CallbackContext context);
        void OnP2RotateLeft(InputAction.CallbackContext context);
        void OnP2RotateRight(InputAction.CallbackContext context);
        void OnStart(InputAction.CallbackContext context);
    }
    public interface INewactionmapActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
